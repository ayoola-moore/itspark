{"version":3,"sources":["InputForm.tsx","lib/findRangeDivisibleBy3.ts","App.tsx","components/errorBoundary/index.js","components/errorBoundary/renderError.js","serviceWorker.ts","index.tsx"],"names":["InputForm","formik","useFormik","initialValues","validationSchema","Yup","firstNumber","min","integer","required","secondNumber","moreThan","onSubmit","alert","A","B","divisiblesInArray","Math","floor","console","log","findRangeDivisibleBy3","handleSubmit","className","htmlFor","id","name","type","onChange","handleChange","onBlur","handleBlur","value","values","placeholder","touched","errors","disabled","isValid","dirty","App","ErrorBoundary","props","state","hasError","error","errorInfo","this","children","React","Component","RenderError","Boolean","window","location","hostname","match","ReactDOM","render","e","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"qPAoFeA,EA1EG,WAChB,IAAMC,EAASC,YAAU,CACvBC,cAAe,GACfC,iBAAkBC,IAAW,CAC3BC,YAAaD,MACVE,IACC,EACA,kEAEDC,UACAC,SAAS,4BACZC,aAAcL,MACXE,IACC,EACA,8FAEDI,SACCN,IAAQ,eACR,8CAEDG,UACAC,SAAS,+BAGdG,SAAU,YAA6C,IAA1CN,EAAyC,EAAzCA,YAAaI,EAA4B,EAA5BA,aACxBG,MCnCwB,SAACC,EAAWC,GACxC,IAEEC,EAFsBC,KAAKC,MAAMH,EAAI,GACjBE,KAAKC,MAAMJ,EAAI,GAIrC,OAFAK,QAAQC,IAAIJ,GAELA,ED6BGK,CAAsBf,EAAaI,OAI7C,OACE,oCACE,0BAAME,SAAUX,EAAOqB,cACrB,yBAAKC,UAAU,iBACb,2BAAOC,QAAQ,eAAf,gBACA,2BACEC,GAAG,cACHC,KAAK,cACLC,KAAK,SACLC,SAAU3B,EAAO4B,aACjBC,OAAQ7B,EAAO8B,WACfC,MAAO/B,EAAOgC,OAAO3B,YACrB4B,YAAa,uBAEf,yBAAKX,UAAW,SACbtB,EAAOkC,QAAQ7B,aAAeL,EAAOmC,OAAO9B,YAC3C,6BAAML,EAAOmC,OAAO9B,aAClB,MAEN,6BACA,2BAAOkB,QAAQ,gBAAf,iBACA,2BACEC,GAAG,eACHC,KAAK,eACLC,KAAK,SACLC,SAAU3B,EAAO4B,aACjBC,OAAQ7B,EAAO8B,WACfC,MAAO/B,EAAOgC,OAAOvB,aACrBwB,YAAa,wBAEf,yBAAKX,UAAW,SACbtB,EAAOkC,QAAQzB,cAAgBT,EAAOmC,OAAO1B,aAC5C,6BAAMT,EAAOmC,OAAO1B,cAClB,MAEN,6BACA,4BAAQiB,KAAK,SAASU,WAAYpC,EAAOqC,SAAWrC,EAAOsC,QAA3D,cEnEKC,MAJf,WACE,OAAO,kBAAC,EAAD,O,gCCHYC,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAAEC,UAAU,GAFR,E,8DAUDC,EAAOC,M,+BAMvB,OAAIC,KAAKJ,MAAMC,SAEN,qDAGFG,KAAKL,MAAMM,Y,gDAhBYH,GAE9B,MAAO,CAAED,UAAU,O,GARoBK,IAAMC,WCKlCC,EALK,SAAC,GAAyB,EAAvBN,MAAwB,IAAjBC,EAAgB,EAAhBA,UAE5B,OAAO,2BAAMA,I,MCQKM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,EAAD,CACEA,OAAQ,SAACC,GAAD,OACN,kBAAC,EAAD,CACEd,MAAOc,EACPb,UAAW,iDAIf,kBAAC,EAAD,OAEFc,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAvB,GACL1B,QAAQ0B,MAAMA,EAAMwB,c","file":"static/js/main.b981903f.chunk.js","sourcesContent":["import { useFormik } from \"formik\";\r\nimport React from \"react\";\r\nimport * as Yup from \"yup\";\r\nimport { findRangeDivisibleBy3 } from \"./lib/findRangeDivisibleBy3\";\r\n\r\ninterface IValues {\r\n  firstNumber: number;\r\n  secondNumber: number;\r\n}\r\n\r\nconst InputForm = () => {\r\n  const formik = useFormik({\r\n    initialValues: {} as IValues,\r\n    validationSchema: Yup.object({\r\n      firstNumber: Yup.number()\r\n        .min(\r\n          0,\r\n          \"negative numbers are not allowed. number should greater than 0\"\r\n        )\r\n        .integer()\r\n        .required(\"first number is required\"),\r\n      secondNumber: Yup.number()\r\n        .min(\r\n          0,\r\n          \"negative numbers are not allowed. number should greater than 0 & greater than first number\"\r\n        )\r\n        .moreThan(\r\n          Yup.ref(\"firstNumber\"),\r\n          \"second number should be greater than first\"\r\n        )\r\n        .integer()\r\n        .required(\"second number is required\"),\r\n    }),\r\n\r\n    onSubmit: ({ firstNumber, secondNumber }: IValues) => {\r\n      alert(findRangeDivisibleBy3(firstNumber, secondNumber));\r\n    },\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={formik.handleSubmit}>\r\n        <div className=\"input-wrapper\">\r\n          <label htmlFor=\"firstNumber\">First Number</label>\r\n          <input\r\n            id=\"firstNumber\"\r\n            name=\"firstNumber\"\r\n            type=\"number\"\r\n            onChange={formik.handleChange}\r\n            onBlur={formik.handleBlur}\r\n            value={formik.values.firstNumber}\r\n            placeholder={\"Enter first number\"}\r\n          />\r\n          <div className={\"error\"}>\r\n            {formik.touched.firstNumber && formik.errors.firstNumber ? (\r\n              <div>{formik.errors.firstNumber}</div>\r\n            ) : null}\r\n          </div>\r\n          <br />\r\n          <label htmlFor=\"secondNumber\">Second Number</label>\r\n          <input\r\n            id=\"secondNumber\"\r\n            name=\"secondNumber\"\r\n            type=\"number\"\r\n            onChange={formik.handleChange}\r\n            onBlur={formik.handleBlur}\r\n            value={formik.values.secondNumber}\r\n            placeholder={\"Enter second number\"}\r\n          />\r\n          <div className={\"error\"}>\r\n            {formik.touched.secondNumber && formik.errors.secondNumber ? (\r\n              <div>{formik.errors.secondNumber}</div>\r\n            ) : null}\r\n          </div>\r\n          <br />\r\n          <button type=\"submit\" disabled={!(formik.isValid && formik.dirty)}>\r\n            Submit\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default InputForm;\r\n","const findRangeDivisibleBy3 = (A: number, B: number) => {\r\n  const totalDivisibles = Math.floor(B / 3),\r\n    excludeDivisibles = Math.floor(A / 3),\r\n    divisiblesInArray = totalDivisibles - excludeDivisibles;\r\n  console.log(divisiblesInArray);\r\n\r\n  return divisiblesInArray;\r\n};\r\n\r\nexport { findRangeDivisibleBy3 };\r\n\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport InputForm from \"./InputForm\";\r\n\r\nfunction App() {\r\n  return <InputForm />;\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\n\r\nexport default class ErrorBoundary extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { hasError: false };\r\n  }\r\n\r\n  static getDerivedStateFromError(error) {\r\n    // Update state so the next render will show the fallback UI.\r\n    return { hasError: true };\r\n  }\r\n\r\n  componentDidCatch(error, errorInfo) {\r\n    // You can also log the error to an error reporting service\r\n    // console.log({ error, errorInfo });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      // You can render any custom fallback UI\r\n      return <h1>Something went wrong.</h1>;\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n","import * as React from \"react\";\r\n\r\nconst RenderError = ({ error, errorInfo }) => {\r\n  // console.error(\"errorBoundary: \", error);\r\n  return <div>{errorInfo}</div>;\r\n};\r\n\r\nexport default RenderError;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport ErrorBoundary from \"./components/errorBoundary\";\r\nimport ErrorMessage from \"./components/errorBoundary/renderError\";\r\nimport \"./index.css\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <ErrorBoundary\r\n    render={(e: Error) => (\r\n      <ErrorMessage\r\n        error={e}\r\n        errorInfo={\"something went wrong. Please contact admin\"}\r\n      />\r\n    )}\r\n  >\r\n    <App />\r\n  </ErrorBoundary>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}